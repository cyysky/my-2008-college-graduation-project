/*    Atech
 *    Copyright (C) 2008  l & k
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Sales.java
 *
 * Created on April 1, 2008, 8:41 PM
 */
package Atech;

import LibAtech.InformationUpdate;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.PrintJob;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  l
 */
public class Sales extends javax.swing.JInternalFrame {

    InformationUpdate atechDB;
    
    DecimalFormat df = new DecimalFormat("0.00");
    Vector columnNames = new Vector();
    Vector data = new Vector();
    
    DefaultTableModel tableModel = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row,int col){
            return false;
        }
    };
    
    JDesktopPane jdp;
    
    ResultSet rs;
    ResultSetMetaData rsm;
       
    
    ListSelectionModel rowSM;
    ListSelectionListener l = new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent e) {
            try {
                //Ignore extra message
                if (e.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (lsm.isSelectionEmpty()) {
                    jbRemove.setEnabled(false);
                } else {
                    jbRemove.setEnabled(true);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    };

    /** Creates new form Sales */
    public Sales(InformationUpdate atechDB, JDesktopPane jdp) {
        this.atechDB = atechDB;
        this.jdp = jdp;
        initComponents();
        initColumnNames();
        rowSM = jtSales.getSelectionModel();
        rowSM.addListSelectionListener(l);
        reset();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jtSales = new javax.swing.JTable();
        JLabelTotal = new javax.swing.JLabel();
        jlblTotal = new javax.swing.JLabel();
        jbCommitPrint = new javax.swing.JButton();
        jbReset = new javax.swing.JButton();
        JLabelItemName = new javax.swing.JLabel();
        JLabelQuantity = new javax.swing.JLabel();
        JLabelUnitPrice = new javax.swing.JLabel();
        JLabelItemNo = new javax.swing.JLabel();
        jtfItemNo = new javax.swing.JTextField();
        jtfQuantity = new javax.swing.JTextField();
        jbAdd = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jlblUnitPrice = new javax.swing.JLabel();
        jlblItemName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtfCash = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Sales");

        jScrollPane5.setViewportView(jtSales);

        JLabelTotal.setFont(new java.awt.Font("Bitstream Vera Sans", 1, 15));
        JLabelTotal.setText("Total  :    RM");

        jlblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblTotal.setText("0.00");
        jlblTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbCommitPrint.setText("Ok");
        jbCommitPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCommitPrintActionPerformed(evt);
            }
        });

        jbReset.setText("Reset");
        jbReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetActionPerformed(evt);
            }
        });

        JLabelItemName.setText("Item Name");

        JLabelQuantity.setText("Quantity");

        JLabelUnitPrice.setText("Unit Price");

        JLabelItemNo.setText("Item No.");

        jtfItemNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfItemNoActionPerformed(evt);
            }
        });
        jtfItemNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfItemNoKeyTyped(evt);
            }
        });

        jtfQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfQuantityActionPerformed(evt);
            }
        });

        jbAdd.setText("Add");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jbRemove.setText("Remove");
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jlblUnitPrice.setText("None");

        jlblItemName.setText("None");

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Money Given By Customer RM :");

        jtfCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfCash.setText("0");
        jtfCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfCashActionPerformed(evt);
            }
        });
        jtfCash.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfCashFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLabelTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLabelItemName)
                            .addComponent(JLabelQuantity)
                            .addComponent(JLabelUnitPrice)
                            .addComponent(JLabelItemNo))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlblItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                            .addComponent(jtfItemNo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                                .addComponent(jbAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jlblUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jbReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfCash, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCommitPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemNo)
                    .addComponent(jtfItemNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemName)
                    .addComponent(jlblItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelUnitPrice)
                    .addComponent(jlblUnitPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelQuantity)
                    .addComponent(jbRemove)
                    .addComponent(jbAdd)
                    .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbReset)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbCommitPrint)
                        .addComponent(jButton1)
                        .addComponent(jtfCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jbCommitPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCommitPrintActionPerformed
   Double money = Double.parseDouble(jtfCash.getText());
    if(money<Double.valueOf(jlblTotal.getText())){
        JOptionPane.showMessageDialog(this, "Sorry the money given is not enough.");
        return;
    }
    Double change = Double.valueOf(jlblTotal.getText()) - money;
    if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(null, "The change is RM "+df.format(change),"Check out comfirm",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE)) {
            checkOut();
    }
}//GEN-LAST:event_jbCommitPrintActionPerformed

private void jbResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetActionPerformed
    reset();
}//GEN-LAST:event_jbResetActionPerformed

private void jtfItemNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfItemNoActionPerformed
    findItem();
}//GEN-LAST:event_jtfItemNoActionPerformed

private void jtfQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfQuantityActionPerformed
    addItem();
}//GEN-LAST:event_jtfQuantityActionPerformed

private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
    addItem();
}//GEN-LAST:event_jbAddActionPerformed

private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        tableModel.removeRow(jtSales.getSelectedRow());
        jtfItemNo.grabFocus();
        jtfItemNo.selectAll();
        calTotal();
}//GEN-LAST:event_jbRemoveActionPerformed

private void jtfCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfCashActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jtfCashActionPerformed

private void jtfCashFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCashFocusGained
jtfCash.selectAll();
}//GEN-LAST:event_jtfCashFocusGained

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
   Double money = Double.parseDouble(jtfCash.getText());
    if(money<Double.valueOf(jlblTotal.getText())){
        JOptionPane.showMessageDialog(this, "Sorry the money given is not enough.");
        return;
    }
    try{
            Frame g =new Frame();
            PrintJob printer = getToolkit().getPrintJob(g, "Print Demo", null);
            if (printer != null)		//Print job not canceled by the user
            {
                            //Create a Graphics object for printing
                    int pr=0;
                    String str;
                    Graphics grPrintPage = printer.getGraphics();
                    grPrintPage.drawString("Atech - Resit", 20, pr+=20 );
                    str=String.format("%-10s%-10s%10s","Price"
                                                    ,"Quantity"
                                                    ,"SubTotal");
                    grPrintPage.drawString(str, 20, pr+=20 );
                    
                    for (int r=0;r<jtSales.getRowCount(); r++){
                         grPrintPage.drawString(""+jtSales.getValueAt(r, 2), 20, pr+=17);
                            str=String.format("%-8s x %-6s = %8s", df.format(jtSales.getValueAt(r, 2)), 
                                                                   jtSales.getValueAt(r, 3),                                                                     
                                                                   df.format(jtSales.getValueAt(r, 4)));
                         grPrintPage.drawString(str, 20, pr+=13);
                    }
                    double cash = Double.valueOf(jtfCash.getText());
                    str=String.format("%-10s%10s%10s", "Total","RM : ",jlblTotal.getText());
                    grPrintPage.drawString(str, 20, pr+=20 );
                    str=String.format("%-10s%10s%10s", "Given","RM : ",df.format(cash));
                    grPrintPage.drawString(str, 20, pr+=20 );
                   
                    double total =Double.valueOf(jlblTotal.getText());
                    str=String.format("%-10s%10s%10s", "Change","RM : ",df.format(cash-total));
                    grPrintPage.drawString(str, 20, pr+=20 );
                    
                    grPrintPage.dispose();          //Send the page to the printer
                    printer.end();			            //End the print job
            }
    }
    catch(Exception e){
                    JOptionPane.showMessageDialog(null,e.getMessage());	
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jtfItemNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfItemNoKeyTyped
// TODO add your handling code here:
}//GEN-LAST:event_jtfItemNoKeyTyped

private void initColumnNames() {
    columnNames.addElement("ItemNo");
    columnNames.addElement("Name");
    columnNames.addElement("Unit Prices");
    columnNames.addElement("Quantity");
    columnNames.addElement("SubTotal");
}
    
private void checkOut(){
        try{
        int lastSalesNo = 0;
        
        rs = atechDB.dbUpdate.executeQuery("SELECT SalesNo FROM SalesRecord");
        
        while(rs.next()){
            if(rs.getInt("SalesNo")>lastSalesNo)
            lastSalesNo = rs.getInt("SalesNo");
        }
        
        atechDB.dbUpdate.executeUpdate("INSERT INTO SalesRecord (SalesNo,Date,Total)" +
                    "Value(" +
                    (lastSalesNo+1) + ",NOW()," +
                    Double.parseDouble(jlblTotal.getText())+")");
        
        for(int i=0;i<tableModel.getRowCount();i++){
               atechDB.dbUpdate.executeUpdate("INSERT INTO SalesItem (SalesNo,ItemNo,Quantity)" +
                       "Value("+
                       (lastSalesNo+1) + "," +
                       jtSales.getValueAt(i, 0) + "," +
                       jtSales.getValueAt(i, 3) + ")");
               atechDB.dbUpdate.executeUpdate("UPDATE Item SET Quantity = Quantity-" +jtSales.getValueAt(i, 3) + " WHERE ItemNo = "+jtSales.getValueAt(i, 0) );            
        }
        reset();
    }
    catch(SQLException ex){
        ex.printStackTrace();
    }
}

private void findItem(){
    try{    
        rs = atechDB.dbStatement.executeQuery("SELECT ItemNo,Price,Name,Quantity FROM Item Where ItemNo = "+ jtfItemNo.getText());
        rsm = rs.getMetaData();
        if(rs.next()){
            jlblItemName.setText(rs.getString("Name"));
            jlblUnitPrice.setText(df.format(rs.getDouble("Price")));
            jtfQuantity.grabFocus();
            jtfQuantity.selectAll();
        }
        else{
            jlblItemName.setText("No such item inside the stock.");
            jlblUnitPrice.setText("None");
            jtfItemNo.selectAll();
        }
    }catch(SQLException ex){
    }
}

private void addItem(){
    try {
        findItem();
        if(Integer.valueOf(jtfQuantity.getText())>rs.getInt("Quantity")||Integer.valueOf(jtfQuantity.getText())<0){
            JOptionPane.showMessageDialog(null,"Invalid Quantity of itemNo","Invalid Quantity",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
         for(int i=0;i<tableModel.getRowCount();i++){
            if(String.valueOf(jtSales.getValueAt(i,0)).equalsIgnoreCase(rs.getString("ItemNo"))){
                int a = Integer.parseInt(jtSales.getValueAt(i, 3).toString());
                int b = Integer.parseInt(jtfQuantity.getText());   
                
                if(rs.getInt("Quantity")<(a+b)){
                    JOptionPane.showMessageDialog(null,"This Item Only Have "+rs.getInt("Quantity")+".","Invalid Quantity",JOptionPane.ERROR_MESSAGE);
                     return;
                }
                jtSales.setValueAt(jlblItemName.getText(), i, 1);
                jtSales.setValueAt(jlblUnitPrice.getText(), i, 2);
                jtSales.setValueAt((a+b), i, 3);
                jtfItemNo.grabFocus();
                jtfItemNo.selectAll();
                calTotal();
                return;
            }
        }
        Vector row = new Vector();
        row.addElement(rs.getString("ItemNo"));
        row.addElement(rs.getString("Name"));
        row.addElement(df.format(rs.getDouble("Price")));
        row.addElement(jtfQuantity.getText());
        data.addElement(row);
        tableModel.setDataVector( data,columnNames);
        jtSales.setModel(tableModel);
        jtSales.repaint();
        
        jtfItemNo.grabFocus();
        jtfItemNo.selectAll();
        calTotal();
        
    } catch (Exception ex) {
        calTotal();
    }
}

private void reset(){
    jlblItemName.setText("None");
    jlblUnitPrice.setText("None");
    jtfItemNo.setText("");
    jtfQuantity.setText("");
    jtfCash.setText("0");
    data.clear();
    tableModel.setDataVector(data, columnNames);
    jtSales.setModel(tableModel);
    jtSales.repaint();
    jtfItemNo.grabFocus();
    jtfItemNo.selectAll();
    calTotal();
}

private void calTotal(){
    Double total= 0.0;
    for(int r =0 ;r<tableModel.getRowCount();r++){
        jtSales.setValueAt(df.format(Double.valueOf(jtSales.getValueAt(r, 3).toString())*Double.valueOf(jtSales.getValueAt(r, 2).toString())),r,4);
        total+=(Double.valueOf(tableModel.getValueAt(r, 2).toString())*Double.valueOf(tableModel.getValueAt(r, 3).toString()));
    }
    jtSales.repaint();
    jlblTotal.setText(""+df.format(total));
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelItemName;
    private javax.swing.JLabel JLabelItemNo;
    private javax.swing.JLabel JLabelQuantity;
    private javax.swing.JLabel JLabelTotal;
    private javax.swing.JLabel JLabelUnitPrice;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbCommitPrint;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbReset;
    private javax.swing.JLabel jlblItemName;
    private javax.swing.JLabel jlblTotal;
    private javax.swing.JLabel jlblUnitPrice;
    private javax.swing.JTable jtSales;
    private javax.swing.JTextField jtfCash;
    private javax.swing.JTextField jtfItemNo;
    private javax.swing.JTextField jtfQuantity;
    // End of variables declaration//GEN-END:variables

}
