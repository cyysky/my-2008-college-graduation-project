/*    Atech
 *    Copyright (C) 2008  l & k
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * PurchaseOrder.java
 *
 * Created on April 1, 2008, 8:54 PM
 */
package Atech;

import LibAtech.InformationUpdate;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  l
 */
public class PurchaseOrder extends javax.swing.JInternalFrame {

    InformationUpdate atechDB;
    JDesktopPane jdp;
    DecimalFormat df = new DecimalFormat("0.00");
    Vector columnNames = new Vector();
    Vector data = new Vector();
    ResultSet rs;
    ResultSetMetaData rsm;
    Vector rowVector = new Vector();
    Vector columnHeaderVector = new Vector();
    Vector insertVector = new Vector();
    int selectedRow = 0;
    int selectedColumn = 0;
    DefaultTableModel dtm = new DefaultTableModel();
    DefaultComboBoxModel supplierModel = new DefaultComboBoxModel();
    DefaultComboBoxModel itemModel = new DefaultComboBoxModel();
    ActionListener aSupplier = new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            try {
                rs = atechDB.dbStatement.executeQuery("SELECT ItemNo FROM Item WHERE SupplierNo = " + jcbSupplierNo.getSelectedItem().toString());
                jcbItemNo.removeActionListener(a);
                itemModel.removeAllElements();
                while (rs.next()) {
                    itemModel.addElement(rs.getObject("ItemNo"));

                }
                jcbItemNo.setModel(itemModel);
                jcbItemNo.addActionListener(a);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    };
    ActionListener a = new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            try {
                rs = atechDB.dbStatement.executeQuery("SELECT ItemName FROM Item WHERE ItemNo = " + jcbItemNo.getSelectedItem().toString());
                if (rs.next()) {
                    jlblItemName.setText(rs.getString("ItemNo"));
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }
    };
    ListSelectionModel rowSM;
    ListSelectionListener l = new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent e) {
            try {
                //Ignore extra message
                if (e.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (lsm.isSelectionEmpty()) {
                    jbRemove.setEnabled(false);
                } else {
                    jbRemove.setEnabled(true);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    };

    public PurchaseOrder(InformationUpdate atechDB, JDesktopPane jdp) {
        this.atechDB = atechDB;
        this.jdp = jdp;
        initComponents();
        initColumnNames();
        rowSM = jtPurchaseOrder.getSelectionModel();
        rowSM.addListSelectionListener(l);
        reset();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jtPurchaseOrder = new javax.swing.JTable();
        jbReset = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jLabelOrderNo = new javax.swing.JLabel();
        jtfOrderNo = new javax.swing.JTextField();
        JLabelTotal = new javax.swing.JLabel();
        jlblTotal = new javax.swing.JLabel();
        jbCommitPrint = new javax.swing.JButton();
        JLabelItemName = new javax.swing.JLabel();
        JLabelQuantity = new javax.swing.JLabel();
        JLabelUnitPrice = new javax.swing.JLabel();
        jtfQuantity = new javax.swing.JTextField();
        jbAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbSupplierNo = new javax.swing.JComboBox();
        jlblItemName = new javax.swing.JLabel();
        jtfUnitCost = new javax.swing.JTextField();
        jcbItemNo = new javax.swing.JComboBox();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Purchase Order");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jtPurchaseOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jtPurchaseOrder);

        jbReset.setText("Reset");
        jbReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetActionPerformed(evt);
            }
        });

        jbRemove.setText("Remove");
        jbRemove.setEnabled(false);
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jLabelOrderNo.setText("Order No.");

        jtfOrderNo.setEnabled(false);
        jtfOrderNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfOrderNoMouseClicked(evt);
            }
        });
        jtfOrderNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfOrderNoActionPerformed(evt);
            }
        });

        JLabelTotal.setFont(new java.awt.Font("Bitstream Vera Sans", 1, 15));
        JLabelTotal.setText("Total  :    RM");

        jlblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblTotal.setText("0.00");
        jlblTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbCommitPrint.setText("Commit & Print Resit");
        jbCommitPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCommitPrintActionPerformed(evt);
            }
        });

        JLabelItemName.setText("Item No.");

        JLabelQuantity.setText("Quantity");

        JLabelUnitPrice.setText("Unit Cost");

        jtfQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfQuantityActionPerformed(evt);
            }
        });

        jbAdd.setText("Add");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Supplier No");

        jLabel2.setText("Item Name");

        jcbSupplierNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSupplierNoActionPerformed(evt);
            }
        });

        jlblItemName.setText("None");

        jtfUnitCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfUnitCostActionPerformed(evt);
            }
        });

        jcbItemNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbItemNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelOrderNo)
                            .addComponent(jbReset)
                            .addComponent(JLabelItemName)
                            .addComponent(JLabelUnitPrice)
                            .addComponent(JLabelQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(jtfOrderNo, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(jtfUnitCost, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(jcbItemNo, 0, 193, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(JLabelTotal)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jlblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jbAdd)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbRemove)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jlblItemName)
                                            .addComponent(jcbSupplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(jbCommitPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrderNo)
                    .addComponent(jtfOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbSupplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jbAdd)
                                .addComponent(jbRemove))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabelItemName)
                                .addComponent(jcbItemNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabelUnitPrice)
                                .addComponent(jtfUnitCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JLabelQuantity)
                                .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlblItemName)
                            .addComponent(jLabel2))))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbReset)
                    .addComponent(jbCommitPrint))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jbResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetActionPerformed
reset();
}//GEN-LAST:event_jbResetActionPerformed

private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        dtm.removeRow(jtPurchaseOrder.getSelectedRow());

        calTotal();
}//GEN-LAST:event_jbRemoveActionPerformed

private void jtfOrderNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfOrderNoActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jtfOrderNoActionPerformed

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
frameStart();
}//GEN-LAST:event_formInternalFrameActivated

private void jbCommitPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCommitPrintActionPerformed
        checkOut();    
}//GEN-LAST:event_jbCommitPrintActionPerformed

private void jtfQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfQuantityActionPerformed
    addItem();
}//GEN-LAST:event_jtfQuantityActionPerformed



private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
    addItem();    
}//GEN-LAST:event_jbAddActionPerformed


private void jtfOrderNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfOrderNoMouseClicked
        
    try{
        int lastOrderNo = 0;
        rs = atechDB.dbUpdate.executeQuery("SELECT OrderNo FROM Order_Invoice");
        while(rs.next()){
            if(rs.getInt("OrderNo")>=lastOrderNo)
            lastOrderNo = rs.getInt("OrderNo");
        }
        jtfOrderNo.setText(String.valueOf(lastOrderNo+1));
    }catch(SQLException ex){
       
    }      
}//GEN-LAST:event_jtfOrderNoMouseClicked

private void jtfUnitCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfUnitCostActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jtfUnitCostActionPerformed

private void jcbSupplierNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSupplierNoActionPerformed

            rs = atechDB.dbStatement.executeQuery("SELECT ItemNo FROM Item WHERE SupplierNo = '" + jcbSupplierNo.getSelectedItem().toString() + "'");//GEN-LAST:event_jcbSupplierNoActionPerformed


private void jcbItemNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbItemNoActionPerformed
findItem();
}//GEN-LAST:event_jcbItemNoActionPerformed

private void initColumnNames() {
    columnNames.addElement("ItemNo");
    columnNames.addElement("Name");
    columnNames.addElement("Supplier No");
    columnNames.addElement("Unit Cost");
    columnNames.addElement("Quantity");
    columnNames.addElement("SubTotal");
}
private void findItem(){
    try{    
        rs = atechDB.dbStatement.executeQuery("SELECT ItemNo,Price,Name,Quantity FROM Item Where ItemNo = "+ jcbItemNo.getSelectedItem().toString());
        rsm = rs.getMetaData();
        if(rs.next()){
            jlblItemName.setText(rs.getString("Name"));
            //jlblUnitPrice.setText(df.format(rs.getDouble("Price")));
            jtfQuantity.grabFocus();
            jtfQuantity.selectAll();
        }
        else{
            JOptionPane.showMessageDialog(null, "Item No not exist, please go to Stock menu add new item manually.");
            jlblItemName.setText("No such item inside the stock.");
            //jlblUnitPrice.setText("None");
            
        }
    }catch(SQLException ex){
    }
}

private void checkOut(){
        try{
        
        atechDB.dbUpdate.executeUpdate("INSERT INTO OrderInvoice (OrderNo,SupplierNo,Total)" +
                    "Value(" +
                    Integer.parseInt(jtfOrderNo.getText()) + "," +
                    Integer.parseInt(jcbSupplierNo.getSelectedItem().toString()) + "," +
                    Double.parseDouble(jlblTotal.getText())+")");           
        
                
 for(int i=0;i<dtm.getRowCount();i++){
               atechDB.dbUpdate.executeUpdate("INSERT INTO OrderItem (OrderNo,ItemNo,Quantity,Cost)" +
                       "Value("+
                       Integer.parseInt(jtfOrderNo.getText()) + "," +
                       jtPurchaseOrder.getValueAt(i, 0) + "," +
                       jtPurchaseOrder.getValueAt(i, 3) + "," +
                       jtPurchaseOrder.getValueAt(i, 4) + ")");
               atechDB.dbUpdate.executeUpdate("UPDATE Item SET Quantity = Quantity+" +jtPurchaseOrder.getValueAt(i, 3) + " WHERE ItemNo = "+jtPurchaseOrder.getValueAt(i, 0) );            
        }
        reset();             
               
               
               
               /*atechDB.dbUpdate.executeUpdate("INSERT INTO OrderItem ( OrderNo,ItemNo,Quantity,PriceIn,Date)" +
                       "Value("+
                       (lastOrderNo+1) + "," +
                       jtPurchaseOrder.getValueAt(i, 0) + "," +
                       jtPurchaseOrder.getValueAt(i, 4) + "," +
                       jtPurchaseOrder.getValueAt(i,3) + "," +
                       new Date().getTime()+")");           
            }*/
       
        
        reset();
    }catch(SQLException ex){
        ex.printStackTrace();
    }
}



private void addItem(){
    try {
        findItem();
        if(Integer.valueOf(jtfQuantity.getText())<0){
            JOptionPane.showMessageDialog(null,"Invalid Quantity of itemNo","Invalid Quantity",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
         for(int i=0;i<dtm.getRowCount();i++){
            if(String.valueOf(jtPurchaseOrder.getValueAt(i,0)).equalsIgnoreCase(rs.getString("ItemNo"))){
                int a = Integer.parseInt(jtPurchaseOrder.getValueAt(i, 4).toString());
                int b = Integer.parseInt(jtfQuantity.getText());   
                
       
                jtPurchaseOrder.setValueAt((a+b), i, 4);
                
                calTotal();
                return;
            }
        }
        Vector row = new Vector();
        row.addElement(rs.getString("ItemNo"));
        row.addElement(rs.getString("Name"));
        row.addElement(jcbSupplierNo.getSelectedItem().toString());
        row.addElement(jtfQuantity.getText());
        row.addElement(jtfQuantity.getText());
        data.addElement(row);
        dtm.setDataVector( data,columnNames);
        jtPurchaseOrder.setModel(dtm);
        jtPurchaseOrder.repaint();
        
       
        calTotal();
        
    } catch (Exception ex) {
        calTotal();
    }
}

private void reset(){
    itemModel.removeAllElements();
    jtfOrderNo.setText("");
    jcbSupplierNo.setModel(supplierModel);
    jlblItemName.setText("None");
    jtfUnitCost.setText("");
    jtfQuantity.setText("");
    jcbItemNo.setModel(itemModel);
    data.clear();
    dtm.setDataVector(data, columnNames);
    jtPurchaseOrder.setModel(dtm);
    jtPurchaseOrder.repaint();

    calTotal();
}

private void calTotal(){
    Double total= 0.0;
    for(int r =0 ;r<dtm.getRowCount();r++){
        
        jtPurchaseOrder.setValueAt(Double.valueOf(jtPurchaseOrder.getValueAt(r, 3).toString())*Double.valueOf(jtPurchaseOrder.getValueAt(r, 4).toString()), r, 5);
        total+=(Double.valueOf(dtm.getValueAt(r, 3).toString())*Double.valueOf(dtm.getValueAt(r, 4).toString()));
    }
       
    jtPurchaseOrder.repaint();
    jlblTotal.setText(""+total);
}

private void frameStart(){
    jcbItemNo.removeActionListener(a);
    itemModel.removeAllElements();
    jcbItemNo.addActionListener(a);
    jcbSupplierNo.removeActionListener(aSupplier);
    supplierModel.removeAllElements();
      try {
                rs = atechDB.dbStatement.executeQuery("SELECT * FROM Supplier");
                while (rs.next()) {
                    supplierModel.addElement(rs.getObject(1));
                }

            jcbSupplierNo.setModel(supplierModel);
            jcbSupplierNo.addActionListener(aSupplier);
 
        int lastOrderNo = 0;
        rs = atechDB.dbUpdate.executeQuery("SELECT OrderNo FROM Order_Invoice");
        while (rs.next()) {
            if (rs.getInt("OrderNo") >= lastOrderNo) {
                lastOrderNo = rs.getInt("OrderNo");
            }
        }
        jtfOrderNo.setText(String.valueOf(lastOrderNo + 1));
    } catch (SQLException ex) {
    }  
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelItemName;
    private javax.swing.JLabel JLabelQuantity;
    private javax.swing.JLabel JLabelTotal;
    private javax.swing.JLabel JLabelUnitPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelOrderNo;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbCommitPrint;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbReset;
    private javax.swing.JComboBox jcbItemNo;
    private javax.swing.JComboBox jcbSupplierNo;
    private javax.swing.JLabel jlblItemName;
    private javax.swing.JLabel jlblTotal;
    private javax.swing.JTable jtPurchaseOrder;
    private javax.swing.JTextField jtfOrderNo;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JTextField jtfUnitCost;
    // End of variables declaration//GEN-END:variables

}
