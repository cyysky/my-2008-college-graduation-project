/*    Atech
 *    Copyright (C) 2008  l & k
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * OrderInvoice.java
 *
 * Created on April 1, 2008, 7:40 PM
 */
package Atech;

import LibAtech.InformationUpdate;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author  l
 */
public class OrderInvoice extends javax.swing.JInternalFrame {

    InformationUpdate atechDB;
    Main atechMain;
    ResultSet rs;
    ResultSetMetaData rsm;
    TableModel tm;
    DefaultTableModel dtm = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }
    };
    Vector rowVector = new Vector();
    Vector columnHeaderVector = new Vector();
    Vector insertVector = new Vector();
    int selectedColumn = 0;
    int selectedRow = 0;
    ListSelectionModel rowSM, colSM;
    TableModelListener h = new TableModelListener() {
        public void tableChanged(TableModelEvent ev) {
            try {
                for (int i = 1; i <= rsm.getColumnCount(); i++) {
                    rs.updateObject(i, dtm.getValueAt(ev.getLastRow(), i - 1));
                }
                rs.updateRow();
            } catch (Exception ex) {
                refreshTable();
            }
        }
    };
    ListSelectionListener l = new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent e) {
            try {
                //Ignore extra message
                if (e.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();

                if (lsm.isSelectionEmpty()) {
                    //System.out.println("No columns are selected.");
                    selectedColumn = 0;
                    selectedRow = 0;

                    jbReceive.setEnabled(false);
                    jbListOrderItem.setEnabled(false);
                    jbPaid.setEnabled(false);      
                }
                else {
                    rs.absolute(lsm.getMinSelectionIndex() + 1);

                    selectedColumn = jtOrder.getSelectedColumn();
                    selectedRow = jtOrder.getSelectedRow();
                    if(jtOrder.getValueAt(jtOrder.getSelectedRow(),3)!=null){
                        jbReceive.setEnabled(false);
                    }else{
                        jbReceive.setEnabled(true);
                    }
                    if(jtOrder.getValueAt(jtOrder.getSelectedRow(),4)!=null){
                        jbPaid.setEnabled(false);
                    }else{
                        jbPaid.setEnabled(true);
                    }
                    jbListOrderItem.setEnabled(true);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    };

    /** Creates new form OrderInvoice */
    public OrderInvoice(InformationUpdate atechDB, Main atechMain) {
        this.atechDB = atechDB;
        this.atechMain = atechMain;
        initComponents();

        rowSM = jtOrder.getSelectionModel();
        rowSM.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        colSM = jtOrder.getColumnModel().getSelectionModel();
        colSM.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    //jtOrder.setCellSelectionEnabled(true); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabelSearchOrderNo = new javax.swing.JLabel();
        jtfOrderNo = new javax.swing.JTextField();
        jbReceive = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtOrder = new javax.swing.JTable();
        jbListOrderItem = new javax.swing.JButton();
        jbPaid = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Supplier Order List Table");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeactivated(evt);
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        JLabelSearchOrderNo.setText("Search Order No.");

        jtfOrderNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfOrderNoActionPerformed(evt);
            }
        });

        jbReceive.setText("Receive");
        jbReceive.setEnabled(false);
        jbReceive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReceiveActionPerformed(evt);
            }
        });

        jtOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtOrder.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jtOrder.setShowHorizontalLines(false);
        jScrollPane6.setViewportView(jtOrder);

        jbListOrderItem.setText("List Order Item");
        jbListOrderItem.setEnabled(false);
        jbListOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListOrderItemActionPerformed(evt);
            }
        });

        jbPaid.setText("Pay");
        jbPaid.setEnabled(false);
        jbPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPaidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLabelSearchOrderNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfOrderNo, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbListOrderItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbReceive)
                        .addGap(4, 4, 4)
                        .addComponent(jbPaid)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelSearchOrderNo)
                    .addComponent(jbReceive)
                    .addComponent(jbListOrderItem)
                    .addComponent(jbPaid)
                    .addComponent(jtfOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jtfOrderNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfOrderNoActionPerformed
    for(int i=0;i<dtm.getRowCount();i++){
        if(String.valueOf(jtOrder.getValueAt(i,0)).equalsIgnoreCase(jtfOrderNo.getText())){
        System.out.println("ok");
            rowSM.setSelectionInterval(i, i);
        }
    }
}//GEN-LAST:event_jtfOrderNoActionPerformed

private void jbReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReceiveActionPerformed
try{    
        if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(null, "Order item is received?","Receive Comfirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE)) {

    atechDB.dbUpdate.executeUpdate("UPDATE Order_Invoice SET Delivered = NOW() WHERE OrderNo ="+ dtm.getValueAt(jtOrder.getSelectedRow(), 0));
        
    receivedItem();
    
   } 
}catch(SQLException ex){
        ex.printStackTrace();
        refreshTable();
    }
refreshTable();

}//GEN-LAST:event_jbReceiveActionPerformed

private void jbListOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListOrderItemActionPerformed
   String selectedOrderNo = String.valueOf(jtOrder.getValueAt(jtOrder.getSelectedRow(), 0));

    try{
        //Click on Received cant display result
        ResultSet tempRS = atechDB.dbStatement.executeQuery("SELECT * FROM OrderItem WHERE OrderNo ='"+selectedOrderNo+"'");
        JInternalFrame jif = new DisplayQuery(tempRS,null);

        atechMain.jdp.add(jif, new Integer(4));
        jif.setTitle("List Order Item");
        jif.pack();
        jif.setBounds(atechMain.getWidth()-jif.getWidth()-50, atechMain.getHeight()-jif.getHeight()-100, 1, 1);
        jif.pack();
        jif.setFrameIcon(new ImageIcon(getClass().getResource("/LibAtech/AtechIcon.png")));
        jif.show();

    }catch(SQLException ex){
    } 
}//GEN-LAST:event_jbListOrderItemActionPerformed

private void jbPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPaidActionPerformed
    try{
        if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(null, "Do you want to pay for selected invoice?","Payment Comfirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE)) {
            atechDB.dbUpdate.executeUpdate("UPDATE Order_Invoice SET PAID = NOW() WHERE OrderNo ="+ dtm.getValueAt(jtOrder.getSelectedRow(), 0));
        }
        jbPaid.setEnabled(false);
    }catch(SQLException ex){
    }
    refreshTable();
}//GEN-LAST:event_jbPaidActionPerformed

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
refreshTable();
}//GEN-LAST:event_formInternalFrameActivated

private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeactivated

                    jbReceive.setEnabled(false);
                    jbListOrderItem.setEnabled(false);
                    jbPaid.setEnabled(false);    
}//GEN-LAST:event_formInternalFrameDeactivated
                           
private void receivedItem(){
    try{   
         
        rs = atechDB.dbUpdate.executeQuery("SELECT * FROM OrderItem WHERE OrderNo = "+jtOrder.getValueAt(jtOrder.getSelectedRow(), 0));   
        if(rs.next()){
        atechDB.dbUpdate.executeUpdate("UPDATE Item SET Quantity = Quantity+" +rs.getInt("Quantity") + " WHERE ItemNo = "+ rs.getInt("ItemNo") );
        }
        jbReceive.setEnabled(false);
        //atechDB.dbUpdate.executeUpdate("UPDATE Item SET Quantity = Quantity+" +jtPurchaseOrder.getValueAt(i, 3) + " WHERE ItemNo = "+jtPurchaseOrder.getValueAt(i, 0) );     
    }catch(Exception ex){
        ex.printStackTrace();
    }
}



private void refreshTable() {
    dtm.removeTableModelListener(h);
    rowSM.removeListSelectionListener(l);
    jbReceive.setEnabled(false);
    try {
        rowVector.clear();
        columnHeaderVector.clear();
        insertVector.clear();
        rs = atechDB.dbStatement.executeQuery("SELECT * FROM Order_Invoice");
        rsm = rs.getMetaData();
        
        while (rs.next()) {
            Vector singleRow = new Vector();
            for (int x = 0; x < rsm.getColumnCount(); x++) {
                singleRow.addElement(rs.getObject(x + 1));
            }
            rowVector.addElement(singleRow);
        }
        for (int c = 1; c <= rsm.getColumnCount(); c++) {
            columnHeaderVector.addElement(rsm.getColumnName(c));
        }
        for (int i = 1; i <= rsm.getColumnCount(); i++) {
            insertVector.addElement(null);
        }
        this.dtm.setDataVector(rowVector, columnHeaderVector);
        jtOrder.setModel(this.dtm);

    } catch (Exception e) {
        e.printStackTrace();
    }
    jtOrder.repaint();

    dtm.addTableModelListener(h);
    rowSM.addListSelectionListener(l);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelSearchOrderNo;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton jbListOrderItem;
    private javax.swing.JButton jbPaid;
    private javax.swing.JButton jbReceive;
    private javax.swing.JTable jtOrder;
    private javax.swing.JTextField jtfOrderNo;
    // End of variables declaration//GEN-END:variables
}
